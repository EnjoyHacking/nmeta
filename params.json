{"name":"Nmeta","tagline":"Extensible Traffic Classification on SDN","body":"![](images/nmeta.png)\r\n\r\n# nmeta - Network Metadata\r\n\r\nThe nmeta project is founded on the belief that innovation in enterprise networks requires a foundation layer of knowledge about both the participants and their types of conversation. The production of this enriched network metadata requires policy-based control and ability to adapt to new purposes through extensibility. \r\n\r\nEnriched network metadata has a number of uses, including classifying flows for Quality of Service (QoS), traffic engineering and security.\r\n\r\n![](images/flow_metadata_screenshot2.png)\r\n\r\nNmeta is a research platform for traffic classification on Software Defined Networking (SDN).  It runs on top of the Ryu SDN controller (see: http://osrg.github.io/ryu/). One day it may even be good enough to run in a real enterprise network...\r\n\r\n# Design Philosophy\r\n\r\nThe collection and enrichment of flow metadata should be decoupled from\r\nsystems that consume it. This abstraction is intended to encourage the\r\ndevelopment of innovative new uses for flow metadata.\r\n\r\nPolicy is used to control how traffic classifiers of many types\r\n(i.e. this is a multiclassifier system) are employed and what actions\r\nthey can take.\r\n\r\nFlow metadata can be enriched by the policy-controlled classifiers - i.e.\r\nextra data can be added.\r\n\r\nThe system is designed to work in an online mode such that classifications are\r\nmade in a timely manner so that consuming systems may take actions while\r\nthe flow is still newly active.\r\n\r\n# Installation\r\n\r\nNote: see wiki page for full instructions for [Installing on Ubuntu](https://github.com/mattjhayes/nmeta/wiki/Installing-on-Ubuntu)\r\n\r\n1) Prerequisites:\r\nAs a prerequisite, install Git, Python, python-yaml and Ryu on a Linux system.\r\n\r\n2) Install nmeta:\r\nFrom the home directory on server that has Ryu installed:\r\n\r\n```\r\nmkdir nmeta\r\ngit clone https://github.com/mattjhayes/nmeta.git\r\n```\r\n\r\n3) Fix LLDP bug (optional)\r\nThe lldp.py packet library module supplied with Ryu has \r\n(at the time of writing) a bug related to parsing system\r\ncapabilities. A modified version of this file can be \r\ncopied over the original to fix this.\r\n\r\nFirst back up the original lldp.py file:\r\n\r\n```\r\ncp ryu/ryu/lib/packet/lldp.py ryu/ryu/lib/packet/lldp.py.original\r\n```\r\n\r\nNow overwrite lldp.py with the modified file:\r\n\r\n```\r\ncp nmeta/lldp-fixed.py ryu/ryu/lib/packet/lldp.py\r\n```\r\n    \r\n4) Run nmeta:\r\nNavigate to the Ryu root directory:\r\n\r\n```\r\ncd\r\ncd ryu\r\n```\r\n\r\nRun nmeta:\r\n\r\n```\r\nPYTHONPATH=. ./bin/ryu-manager ../nmeta/nmeta.py\r\n```\r\n\r\n# Configuration\r\n\r\nConfiguration files are in the config subdirectory and are written\r\nin YAML (\"YAML Ain't Markup Language\") format\r\n(see: http://www.yaml.org/spec/1.2/spec.html)\r\n\r\n## General Configuration\r\n\r\nThe general configuration parameters are stored in the file:\r\n\r\n```\r\nconfig/config.yaml\r\n```\r\n\r\n## Traffic Classification Configuration\r\n\r\nTraffic Classification (TC) configuration parameters are stored in the file:\r\n\r\n```\r\nconfig/tc_policy.yaml\r\n```\r\n\r\n### Static Classifiers\r\n\r\nTBD\r\n  \r\n### Identity Classifiers\r\n\r\n  All identity classifiers are prefixed with 'identity_'\r\n  LLDP systemname may be matched as a regular expression\r\n  The match pattern must be contained in single quotes\r\n    Example:\r\n    -------\r\n    To match system names of *.audit.example.com add this policy condition:\r\n    \r\n```\r\nidentity_lldp_systemname_re: '.*\\.audit\\.example\\.com'\r\n```\r\n\r\n### Statistical Classifiers\r\n\r\n  All statistical classifiers are prefixed with 'statistical_'\r\n\r\nTBD - more here\r\n  \r\n### Payload Classifiers\r\n\r\nTBD\r\n\r\n## QoS Configuration\r\n\r\nQuality of Service (QoS) configuration parameters are stored in the file:\r\n\r\n```\r\nqos_policy.yaml\r\n```\r\n\r\n# Logging\r\n\r\nnmeta is configured to log to\r\nTBD\r\n\r\n# Misc Scripts\r\n\r\nA few scripts that may be useful for testing are included\r\nin the misc sub directory. These include:\r\n - htest.py An HTTP performance testing script\r\n - jsonpretty.py Converts JSON API responses into human-readable format\r\n - websvr.py A simple web server\r\n\r\n# API\r\n\r\nREST API Calls (examples to run on local host):\r\n\r\nReturn the Flow Metadata Table:\r\n```\r\ncurl -X GET http://127.0.0.1:8080/nmeta/flowtable/\r\n```\r\nor using the supplied script to provide 'pretty' output:\r\n```\r\nsudo python nmeta/misc/jsonpretty.py http://127.0.0.1:8080/nmeta/flowtable/\r\n```\r\n\r\nReturn the Identity NIC Table:\r\n```\r\ncurl -X GET http://127.0.0.1:8080/nmeta/identity/nictable/\r\n```\r\n\r\nReturn the Identity System Table:\r\n```\r\ncurl -X GET http://127.0.0.1:8080/nmeta/identity/systemtable/\r\n```\r\n\r\n\r\n\r\n# Feature Enhancement Wishlist\r\n\r\nSee ![Issues](https://github.com/mattjhayes/nmeta/issues) for list of enhancements and bugs\r\n\r\n# Disclaimer\r\n\r\nThis code carries no warrantee whatsoever. Use at your own risk.\r\n\r\n# How to Contribute\r\n\r\nThis is a new project so there are a number of areas where interesting and useful work can be carried out (see ![Issues](https://github.com/mattjhayes/nmeta/issues))\r\n\r\nPlease contact me if you want to be added as a contributor to the project.\r\n\r\nMatt Hayes (matthew_john_hayes@hotmail.com)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}